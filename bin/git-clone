#!/bin/bash

set -euo pipefail # Exit on error, unset var, and pipe failure

# --- Configuration ---
DEFAULT_BASE_DIR="$HOME/github"

# --- Functions ---
usage() {
  local script_name
  script_name="$(basename "$0")"
  echo "Usage: $script_name <repository_url> [target_directory_name] [--base-dir <path>]"
  echo
  echo "Clones a Git repository into an organization-based directory structure."
  echo
  echo "Arguments:"
  echo "  <repository_url>        The URL of the Git repository to clone."
  echo "  [target_directory_name] Optional. Name for the cloned repository directory."
  echo
  echo "Options:"
  echo "  --base-dir <path>       Specify the base directory where organization folders"
  echo "                          will be created. Defaults to '$DEFAULT_BASE_DIR'."
  echo "  -h, --help              Show this help message."
}

log_error() {
  echo "Error: $*" >&2
}

# --- Argument Parsing ---
REPO_URL=""
TARGET_REPO_NAME=""
BASE_DIR="$DEFAULT_BASE_DIR"

while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      usage
      exit 0
      ;;
    --base-dir)
      if [[ -z "${2-}" ]] || [[ "$2" == -* ]]; then # Check if $2 is unset or is an option
        log_error "--base-dir requires an argument."
        usage
        exit 1
      fi
      BASE_DIR="$2"
      shift 2
      ;;
    *)
      if [[ -z "$REPO_URL" ]]; then
        REPO_URL="$1"
      elif [[ -z "$TARGET_REPO_NAME" ]]; then
        TARGET_REPO_NAME="$1"
      else
        log_error "Too many arguments."
        usage
        exit 1
      fi
      shift
      ;;
  esac
done

if [[ -z "$REPO_URL" ]]; then
  log_error "Repository URL is required."
  usage
  exit 1
fi

# Check for git command
if ! command -v git >/dev/null 2>&1; then
  log_error "git command not found. Please install Git."
  exit 1
fi

# Create base directory if it doesn't exist and get its absolute, canonical path
if ! mkdir -p "$BASE_DIR"; then
  # This log_error might not be reached if set -e exits immediately on mkdir failure.
  # However, it's good for clarity and in case -e is temporarily disabled.
  log_error "Could not create or access base directory '$BASE_DIR'."
  exit 1
fi

if ! BASE_DIR_ABS="$(cd "$BASE_DIR" && pwd -P)"; then
  log_error "Could not determine absolute path for base directory '$BASE_DIR'."
  exit 1
fi

# Extract the organization/user and repository name from the URL
org=""
repo_from_url=""

# Regex for git@host:org/repo.git or git@host:org/repo (without .git)
ssh_pattern='^git@([^:]+):([^/]+)/([^/.]+?)(\.git)?$'
# Regex for http(s)://host/org/repo.git or http(s)://host/org/repo
http_pattern='^https?://[^/]+/([^/]+)/([^/.]+?)(\.git)?$'

if [[ "$REPO_URL" =~ $ssh_pattern ]]; then
  # For SSH URLs like git@github.com:user/repo.git
  # BASH_REMATCH[1] is host (github.com)
  # BASH_REMATCH[2] is org/user (user)
  # BASH_REMATCH[3] is repo name (repo)
  org="${BASH_REMATCH[2]}"
  repo_from_url="${BASH_REMATCH[3]}"
elif [[ "$REPO_URL" =~ $http_pattern ]]; then
  # For HTTPS URLs like https://github.com/user/repo.git
  # BASH_REMATCH[1] is org/user (user)
  # BASH_REMATCH[2] is repo name (repo)
  org="${BASH_REMATCH[1]}"
  repo_from_url="${BASH_REMATCH[2]}"
else
  # Fallback or simplified parsing for other URL types (like local paths)
  _temp_repo_name=$(basename "$REPO_URL" .git)
  _temp_org_name_path=$(dirname "$REPO_URL")
  _temp_org_name=$(basename "$_temp_org_name_path")

  # Handle cases like /path/to/repo or just repo (where dirname is . or /)
  if [[ -n "$_temp_org_name" ]] && [[ "$_temp_org_name" != "." ]] && [[ "$_temp_org_name" != "/" ]] && [[ -n "$_temp_repo_name" ]]; then
    org="$_temp_org_name"
    repo_from_url="$_temp_repo_name"
  elif [[ "$_temp_org_name" == "." ]] && [[ -n "$_temp_repo_name" ]]; then
    # If cloning from a relative path like "myrepo.git" or "./myrepo.git"
    # Default org to the current user or a generic "local"
    # Using `whoami` for the organization part for local repos if no other structure provided
    org_candidate=$(whoami)
    if [[ -n "$org_candidate" ]]; then
      org="$org_candidate"
    else
      org="local" # Fallback if whoami fails or is empty
    fi
    repo_from_url="$_temp_repo_name"
  fi
fi

if [[ -z "$org" ]] || [[ -z "$repo_from_url" ]]; then
  log_error "Unable to parse organization and repository name from URL: $REPO_URL"
  echo "Please ensure the URL is in a common format (e.g., git@host:org/repo.git or https://host/org/repo.git)" >&2
  echo "or a recognized local path like 'org/repo' or '/path/to/org/repo'." >&2
  exit 1
fi

if [[ -z "$TARGET_REPO_NAME" ]]; then
  TARGET_REPO_NAME="$repo_from_url"
fi

# Organization directory path
org_dir_path="$BASE_DIR_ABS/$org"

# Target repository path
target_repo_path="$org_dir_path/$TARGET_REPO_NAME"

if [ -d "$target_repo_path" ]; then
  log_error "Target directory '$target_repo_path' already exists."
  exit 1
fi

org_created=false
if [ ! -d "$org_dir_path" ]; then
  echo "Creating organization directory: $org_dir_path"
  mkdir -p "$org_dir_path" # set -e handles error if mkdir fails
  org_created=true
fi

echo "Cloning '$REPO_URL' into '$target_repo_path'..."
if ! git clone "$REPO_URL" "$target_repo_path"; then
  log_error "Failed to clone the repository from '$REPO_URL'."
  # Attempt to cleanup partially created directories
  if [ -e "$target_repo_path" ]; then # Check if target path exists (could be file or dir if clone did strange things)
    echo "Attempting to remove partially created target '$target_repo_path'..."
    rm -rf "$target_repo_path" || echo "Warning: Could not remove partially created target '$target_repo_path'." >&2
  fi

  if [ "$org_created" = true ] && [ -d "$org_dir_path" ]; then
    # Check if org directory is empty before attempting to remove it
    # Use find to check for any files or directories within org_dir_path
    if [ -z "$(find "$org_dir_path" -mindepth 1 -print -quit)" ]; then
      echo "Removing empty organization directory that was created: $org_dir_path"
      rmdir "$org_dir_path" || echo "Warning: Could not remove empty organization directory '$org_dir_path'." >&2
    else
      echo "Notice: Organization directory '$org_dir_path' was created but is not empty. Other files/dirs might exist." >&2
    fi
  fi
  exit 1
fi

echo "Successfully cloned '$REPO_URL' into '$target_repo_path'"
exit 0
