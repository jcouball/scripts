#!/usr/bin/env ruby

require 'stringio'

top_level_dir = `git rev-parse --show-toplevel 2>/dev/null`.chomp
if top_level_dir.empty? || top_level_dir != Dir.pwd
  puts 'This script must be run from the root of a git repository.'
  exit 1
end

unless system('command -v pbcopy > /dev/null 2>&1')
  warn 'pbcopy not found or not executable. This script is intended for macOS.'
  exit 1
end

require 'erb'
require 'open3'

# Defines the context in which the ERB template will be evaluated.
# You can add instance variables here, and they will be available in your ERB file.
class TemplateContext
  def initialize
    @current_user = ENV['USER'] || 'User'
  end

  def get_binding
    binding
  end

  def project_to_s(project_name: Dir.pwd, file_patterns: ruby_project_files)
    output = StringIO.new

    output << <<~HEADER
      This is my project '#{project_name}'

      Here are the files from the project delimited by "===":

    HEADER

    files =
      file_patterns.flat_map do |pattern|
        Dir.glob(pattern, File::FNM_DOTMATCH)
          .reject { |f| File.directory?(f) }
          .reject { |f| git_file?(f) }
      end

    files.each { |f| output << file_to_s(file: f) }

    output.string
  end

  def file_to_s(file:)
    <<~FILE
      #{file}:

      ===
      #{File.read(file).chomp}
      ===

    FILE
  end

  def ruby_project_files
    %w[
      .github/**/*
      .commitlintrc.yml
      .markdownlint.yml
      .release-please-manifest.json
      .rspec
      .rubocop.yml
      CHANGELOG.md
      Gemfile
      LICENSE.txt
      package.json
      Rakefile
      README.md
      release-please-config.json
      *.gemspec
      bin/**/*
      exe/**/*
      lib/**/*
      spec/**/*
      test/**/*
      tests/**/*
    ].freeze
  end

  def all_files
    %w[**/*].freeze
  end

  def git_file?(file)
    file.start_with?('.git/') || file.include?('/.git/')
  end
end

def usage
  puts <<~USAGE
    Usage: ai-prompt [--help|-h] [<erb_file>]

    Generate an AI prompt from an ERB template and copy it to the clipboard

    <erb_file>: The ERB template file to process. Defaults to 'ai-prompt.erb'.
    --help|-h:  Show this help message.

    ERB methods available:
      <%=
        # Returns a formatted string of the project name and files
        project_name = 'Project Name'      # Default is current directory name
        file_patterns = ruby_project_files # Default is common Ruby project files
        project_to_s(project_name:, file_patterns:)
      %>
      <%=
        # Return a formatted string of a single file's contents
        file_to_s(file:)    # Outputs the contents of a single file
      %>
      <%
        ruby_project_files # An array of glob patterns for common Ruby files
        all_files          # An array of glob patterns for all files
      %>

    Example ai-prompt.erb file:
      I am writing a Ruby gem that provides a ruby interface to the git command line tool.
      See the project code below.

      Write an announcement for the architecture redesign of the gem to be
      placed in the README.md file in the section "Architecture Redesign
      Announcement". This announcement should be short, concise, and to the
      point and should introduce and link to the redesign documents found in
      the project's `redesign` directory.

      <%=
        file_patterns = %w[
          Gemfile
          Rakefile
          README.md
          *.gemspec
          lib/**/*
          redesign/*
        ]

        output_project(file_patterns:)
      %>
  USAGE
end

if ARGV[0] == '--help' || ARGV[0] == '-h'
  usage
  exit 0
end

erb_file_name = ARGV[0] || 'ai-prompt.erb'

begin
  erb_template_content = File.read(erb_file_name)
rescue => e
  puts "Error reading file: #{e.message}"
  exit 1
end

context = TemplateContext.new
renderer = ERB.new(erb_template_content, trim_mode: "-") # trim_mode cleans up whitespace
processed_output = renderer.result(context.get_binding)

begin
  IO.popen('pbcopy', 'w') do |pipe|
    pipe.write(processed_output)
  end
  puts "Prompt has been output to the clipboard."
rescue Errno::ENOENT
  puts "Error: 'pbcopy' command not found. This script is intended for macOS."
  exit 1
end
